# File: test_unbiased_mcmc_estimator_new.py
"""
This test script evaluates the unbiased MCMC estimator constructed from the coupled MH kernel.
It tests three target distributions:
  1. 2D banana distribution,
  2. High-dimensional multimodal normal (two modes),
  3. Multimode Gaussian mixture (three modes).
For each case, it verifies that the averaged estimator (using h(x)=x[0]) over batches is close to the known value (0 for these symmetric distributions)
and that the full chain samples (for both chains) and meeting time are properly recorded for further TFP-based analysis.
"""

import unittest
import tensorflow as tf
import numpy as np
import tensorflow_probability as tfp

from coupled_mh_kernel import CoupledMetropolisHastingsKernel
from unbiased_mcmc_estimator import UnbiasedMCMCEstimator

def banana_log_prob(x, b=0.1):
    x1 = x[:, 0]
    x2 = x[:, 1]
    y2 = x2 + b * (x1**2 - 1.0)
    return -0.5 * (x1**2 + y2**2)

def multimodal_log_prob(x, d=10, mu=2.0):
    center1 = tf.ones_like(x)*mu
    center2 = -tf.ones_like(x)*mu
    log_comp1 = -0.5*tf.reduce_sum((x-center1)**2, axis=-1)
    log_comp2 = -0.5*tf.reduce_sum((x-center2)**2, axis=-1)
    max_log = tf.maximum(log_comp1, log_comp2)
    return max_log + tf.math.log(0.5*tf.exp(log_comp1-max_log) + 0.5*tf.exp(log_comp2-max_log))

def multimode_log_prob(x, d=5, mu=3.0):
    center1 = -mu * tf.ones_like(x)
    center2 = tf.zeros_like(x)
    center3 = mu * tf.ones_like(x)
    log_comp1 = -0.5*tf.reduce_sum((x-center1)**2, axis=-1)
    log_comp2 = -0.5*tf.reduce_sum((x-center2)**2, axis=-1)
    log_comp3 = -0.5*tf.reduce_sum((x-center3)**2, axis=-1)
    max_log = tf.maximum(tf.maximum(log_comp1, log_comp2), log_comp3)
    return max_log + tf.math.log((tf.exp(log_comp1-max_log)+tf.exp(log_comp2-max_log)+tf.exp(log_comp3-max_log))/3.0)

def h_fn(x):
    # Use the first coordinate for evaluation.
    return x[:, 0]

class TestUnbiasedMCMCEstimator(unittest.TestCase):
    def setUp(self):
        tf.random.set_seed(42)
        np.random.seed(42)
        self.batch = 16
    
    def run_estimator(self, target_log_prob_fn, d, proposal_var, quantile, m_factor, coupling_method):
        init_state1 = np.random.randn(self.batch, d).astype(np.float32)
        init_state2 = np.random.randn(self.batch, d).astype(np.float32)
        initial_state = (tf.convert_to_tensor(init_state1), tf.convert_to_tensor(init_state2))
        kernel = CoupledMetropolisHastingsKernel(
            target_log_prob_fn=target_log_prob_fn,
            proposal_var=proposal_var,
            coupling_method=coupling_method,
            max_iter=5,
            seed=100)
        estimator_obj = UnbiasedMCMCEstimator(
            coupled_kernel=kernel,
            h_fn=h_fn,
            quantile=quantile,
            m_factor=m_factor,
            max_prelim_iterations=300)
        results = estimator_obj.run(initial_state)
        avg_est = tf.reduce_mean(results["estimator"]).numpy()
        return avg_est, results
    
    def test_banana_estimator(self):
        d = 2
        proposal_var = 1.0
        avg_est, results = self.run_estimator(
            lambda x: banana_log_prob(x, b=0.1),
            d, proposal_var, quantile=0.9, m_factor=5, coupling_method="maximal")
        print("Banana estimator average:", avg_est)
        self.assertTrue(np.abs(avg_est) < 0.3, "Estimator for banana distribution is not close to 0.")
    
    def test_multimodal_estimator(self):
        # Test on high-dimensional multimodal normal (2 modes)
        d = 10
        proposal_var = 1.0
        avg_est, results = self.run_estimator(
            lambda x: multimodal_log_prob(x, d=d, mu=2.0),
            d, proposal_var, quantile=0.9, m_factor=5, coupling_method="maximal_reflection")
        print("High-dimensional multimodal estimator average:", avg_est)
        self.assertTrue(np.abs(avg_est) < 0.3, "Estimator for high-dimensional multimodal distribution is not close to 0.")
    
    def test_multimode_estimator(self):
        # Test on multimode Gaussian mixture (3 modes)
        d = 5
        proposal_var = 1.0
        avg_est, results = self.run_estimator(
            lambda x: multimode_log_prob(x, d=d, mu=3.0),
            d, proposal_var, quantile=0.9, m_factor=5, coupling_method="maximal")
        print("Multimode Gaussian estimator average:", avg_est)
        self.assertTrue(np.abs(avg_est) < 0.3, "Estimator for multimode Gaussian distribution is not close to 0.")

if __name__ == "__main__":
    unittest.main()
