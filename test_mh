# File: test_coupled_mh_kernel_new.py
"""
This test script evaluates the coupled MH kernel.
It tests three target distributions:
  1. 2D banana distribution,
  2. High-dimensional multimodal normal (two modes),
  3. Multimode Gaussian mixture (three modes).
Each test checks that:
  - The output state shapes are correct.
  - The kernel’s meeting time is recorded (即至少有一条链在一定迭代内 meeting) 
  - 采用不同的 proposal coupling 策略："maximal" 或 "maximal_reflection"（示例中各自调用一次）。
"""

import unittest
import tensorflow as tf
import numpy as np
import tensorflow_probability as tfp

from coupled_mh_kernel import CoupledMetropolisHastingsKernel

tfd = tfp.distributions

# Define target log probability functions
def banana_log_prob(x, b=0.1):
    # x: [batch,2]
    x1 = x[:, 0]
    x2 = x[:, 1]
    y2 = x2 + b * (x1 ** 2 - 1.0)
    return -0.5 * (x1 ** 2 + y2 ** 2)

def multimodal_log_prob(x, d=10, mu=2.0):
    # Mixture of two equally weighted Gaussians centered at mu and -mu (for high-dimensional cases)
    center1 = tf.ones_like(x) * mu
    center2 = -tf.ones_like(x) * mu
    log_comp1 = -0.5 * tf.reduce_sum((x - center1) ** 2, axis=-1)
    log_comp2 = -0.5 * tf.reduce_sum((x - center2) ** 2, axis=-1)
    max_log = tf.maximum(log_comp1, log_comp2)
    return max_log + tf.math.log(0.5 * tf.exp(log_comp1 - max_log) + 0.5 * tf.exp(log_comp2 - max_log))

def multimode_log_prob(x, d=5, mu=3.0):
    # Mixture of three Gaussians: centers at -mu, 0, and mu (for moderate dimensions)
    center1 = -mu * tf.ones_like(x)
    center2 = tf.zeros_like(x)
    center3 = mu * tf.ones_like(x)
    log_comp1 = -0.5 * tf.reduce_sum((x - center1) ** 2, axis=-1)
    log_comp2 = -0.5 * tf.reduce_sum((x - center2) ** 2, axis=-1)
    log_comp3 = -0.5 * tf.reduce_sum((x - center3) ** 2, axis=-1)
    max_log = tf.maximum(tf.maximum(log_comp1, log_comp2), log_comp3)
    return max_log + tf.math.log((tf.exp(log_comp1 - max_log) +
                                  tf.exp(log_comp2 - max_log) +
                                  tf.exp(log_comp3 - max_log)) / 3.0)

def h_fn(x):
    # Test function: take the first coordinate (expectation 0 if symmetric)
    return x[:, 0]

class TestCoupledMHKernel(unittest.TestCase):
    
    def setUp(self):
        tf.random.set_seed(123)
        np.random.seed(123)
    
    def simulate_kernel(self, initial_state, target_log_prob_fn, proposal_var, num_steps=30, coupling_method="maximal"):
        kernel = CoupledMetropolisHastingsKernel(
            target_log_prob_fn=target_log_prob_fn,
            proposal_var=proposal_var,
            coupling_method=coupling_method,
            max_iter=5,
            seed=100)
        kernel_results = kernel.bootstrap_results(initial_state)
        state = initial_state
        states = [initial_state]
        for i in range(num_steps):
            state, kernel_results = kernel.one_step(state, kernel_results)
            states.append(state)
        return state, kernel_results, states
    
    def test_banana_distribution_mh(self):
        # Test the MH kernel on 2D banana distribution
        batch = 16
        d = 2
        init1 = np.random.randn(batch, d).astype(np.float32)
        init2 = np.random.randn(batch, d).astype(np.float32)
        initial_state = (tf.convert_to_tensor(init1), tf.convert_to_tensor(init2))
        state, kernel_results, states = self.simulate_kernel(
            initial_state,
            lambda x: banana_log_prob(x, b=0.1),
            proposal_var=1.0,
            num_steps=30,
            coupling_method="maximal")
        # Check output shapes
        self.assertEqual(state[0].shape, (batch, d))
        self.assertEqual(state[1].shape, (batch, d))
        self.assertEqual(kernel_results["meeting_time"].shape, (batch,))
        mt = kernel_results["meeting_time"].numpy()
        self.assertTrue(np.any(mt >= 0), "At least one chain should have met in banana MH kernel test.")
    
    def test_multimodal_highdim_mh(self):
        # Test the MH kernel on high-dimensional multimodal normal (two modes)
        batch = 16
        d = 10
        init1 = np.random.randn(batch, d).astype(np.float32)
        init2 = np.random.randn(batch, d).astype(np.float32)
        initial_state = (tf.convert_to_tensor(init1), tf.convert_to_tensor(init2))
        state, kernel_results, states = self.simulate_kernel(
            initial_state,
            lambda x: multimodal_log_prob(x, d=d, mu=2.0),
            proposal_var=1.0,
            num_steps=40,
            coupling_method="maximal_reflection")
        self.assertEqual(state[0].shape, (batch, d))
        mt = kernel_results["meeting_time"].numpy()
        self.assertTrue(np.any(mt >= 0), "None of the chains met in high-dimensional multimodal MH kernel test.")
    
    def test_multimode_gaussian_mh(self):
        # Test the MH kernel on a multimode Gaussian mixture (three modes)
        batch = 16
        d = 5
        init1 = np.random.randn(batch, d).astype(np.float32)
        init2 = np.random.randn(batch, d).astype(np.float32)
        initial_state = (tf.convert_to_tensor(init1), tf.convert_to_tensor(init2))
        state, kernel_results, states = self.simulate_kernel(
            initial_state,
            lambda x: multimode_log_prob(x, d=d, mu=3.0),
            proposal_var=1.0,
            num_steps=50,
            coupling_method="maximal")
        self.assertEqual(state[0].shape, (batch, d))
        mt = kernel_results["meeting_time"].numpy()
        self.assertTrue(np.any(mt >= 0), "No chain met in multimode Gaussian MH kernel test.")

if __name__ == "__main__":
    unittest.main()
